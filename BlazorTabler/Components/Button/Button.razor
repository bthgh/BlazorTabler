@inherits TablerComponentBase
@namespace BlazorTabler


@if (Type is ButtonTypes.Link or ButtonTypes.ActionButton)
{
    <a href="@Href" @ref="@Element" id="@Id" class="@Classes" style="@CssStyle" @attributes="@AdditionalAttributes" @onclick="HandleOnClick">
        @ChildContent
    </a>
}
else
{
    <button @ref="@Element" type="@Type.GetDescription()" id="@Id" class="@Classes" style="@CssStyle" @attributes="@AdditionalAttributes" @onclick="HandleOnClick">
        @ChildContent
    </button>
}

@code
{
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public bool IsActive { get; set; }
    [Parameter] public ButtonColors? ButtonColor { get; set; }
    [Parameter] public ButtonStyles ButtonStyle { get; set; } = ButtonStyles.Standard;
    [Parameter] public SvgIcon? Icon { get; set; }
    [Parameter] public ButtonTypes Type { get; set; } = ButtonTypes.Link;
    [Parameter] public string Href { get; set; } = string.Empty;
    [Parameter] public EventCallback Onclick { get; set; }


    private string Classes =>
        string.Join(" ",
                Type is ButtonTypes.ActionButton ? TablerClasses.ActionButton : TablerClasses.Button,
                ButtonColor is not null ? ButtonStyle.GetDescription().Replace("###", ButtonColor?.GetDescription()) : "",
                IsActive ? TablerClasses.ButtonActive : "",
                IsDisabled ? TablerClasses.ButtonDisabled : "",
                CssClass
            )
            .Trim();

    private async Task HandleOnClick()
    {
        await Onclick.InvokeAsync();
    }
}